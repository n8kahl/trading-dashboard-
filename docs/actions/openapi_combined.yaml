openapi: 3.1.0
info:
  title: Trading Assistant API (Canonical + Diag)
  version: "1.0.0"
servers:
  - url: https://tradingassistantmcpready-production.up.railway.app
    description: Production
components:
  schemas:
    StdEnvelope:
      type: object
      required: [status]
      properties:
        status: { type: string, enum: [ok, error] }
        data: {}
        error: { type: string, nullable: true }
paths:
  /api/v1/strategies/evaluate:
    post:
      operationId: evaluateStrategies
      summary: Evaluate strategies for a symbol/timeframe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [symbol]
              properties:
                symbol: { type: string }
                timeframe: { type: string, enum: [minute, day], default: day }
      responses:
        "200":
          description: Envelope with evaluation
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StdEnvelope' }

  /api/v1/strategies/suggest-trade:
    post:
      operationId: suggestTrade
      summary: Build a trade plan from latest evaluation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [symbol]
              properties:
                symbol: { type: string }
                timeframe: { type: string, enum: [minute, day], default: day }
      responses:
        "200":
          description: Envelope with suggestion
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StdEnvelope' }

  /api/v1/options/pick:
    post:
      operationId: optionsPick
      summary: Pick options contracts by horizon
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [symbol, side, horizon]
              properties:
                symbol: { type: string }
                side: { type: string, enum: [CALL, PUT] }
                horizon: { type: string, enum: [short, swing, both], default: both }
                delta_range:
                  type: array
                  items: { type: number }
                  minItems: 2
                  maxItems: 2
                max_spread_pct: { type: number }
                min_oi: { type: integer }
                min_vol: { type: integer }
      responses:
        "200":
          description: Envelope with picks
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StdEnvelope' }

  /api/v1/screener/watchlist/start:
    post:
      operationId: screenerStart
      summary: Start live stream for a watchlist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [symbols]
              properties:
                symbols:
                  type: array
                  items: { type: string }
      responses:
        "200":
          description: Envelope
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StdEnvelope' }

  /api/v1/screener/watchlist/get:
    get:
      operationId: screenerGet
      summary: Get current watchlist
      responses:
        "200":
          description: Envelope
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StdEnvelope' }

  /api/v1/screener/watchlist/ranked:
    get:
      operationId: screenerRanked
      summary: Rank watchlist by strategy score
      parameters:
        - in: query
          name: n_bars
          schema: { type: integer, default: 120 }
      responses:
        "200":
          description: Envelope with ranked list
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StdEnvelope' }

  /api/v1/screener/watchlist/stop:
    post:
      operationId: screenerStop
      summary: Stop live stream and clear watchlist
      responses:
        "200":
          description: Envelope
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StdEnvelope' }

  /api/v1/backtest/quick:
    post:
      operationId: backtestQuick
      summary: Sanity backtest over lookback window
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [symbol]
              properties:
                symbol: { type: string }
                timeframe: { type: string, enum: [day, minute], default: day }
                lookback: { type: integer, default: 160 }
      responses:
        "200":
          description: Envelope with backtest stats
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StdEnvelope' }

  /api/v1/journal/trade:
    post:
      operationId: journalAddTrade
      summary: Record a trade
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [symbol]
              properties:
                symbol: { type: string }
                side: { type: string, description: "CALL|PUT|LONG|SHORT" }
                entry: { type: number }
                stop: { type: number }
                tp1: { type: number }
                tp2: { type: number }
                exit_price: { type: number }
                result_r: { type: number }
                notes: { type: string }
      responses:
        "200":
          description: Envelope saved
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StdEnvelope' }

  /api/v1/journal/summary:
    get:
      operationId: journalSummary
      summary: Journal summary over a time window
      parameters:
        - in: query
          name: days
          schema: { type: integer, default: 30 }
      responses:
        "200":
          description: Envelope with journal stats
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StdEnvelope' }

  /api/v1/alerts/set:
    post:
      operationId: alertsSet
      summary: Create an alert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [symbol, condition]
              properties:
                symbol: { type: string }
                timeframe: { type: string, enum: [minute], default: minute }
                condition:
                  type: object
                  required: [type]
                  properties:
                    type:
                      type: string
                      enum: [price_above, price_below, cross_vwap_up, cross_vwap_down, percent_change_ge]
                    value: { type: number }
                    minutes: { type: integer }
                    threshold_pct: { type: number }
                expires_at: { type: string, format: date-time }
      responses:
        "200":
          description: Envelope with created id
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StdEnvelope' }

  /api/v1/alerts/list:
    get:
      operationId: alertsList
      summary: List alerts (optionally by symbol)
      parameters:
        - in: query
          name: symbol
          schema: { type: string }
      responses:
        "200":
          description: Envelope with alerts
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StdEnvelope' }

  /api/v1/alerts/recent-triggers:
    get:
      operationId: alertsRecent
      summary: Recent alert triggers
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 50 }
      responses:
        "200":
          description: Envelope with triggers
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StdEnvelope' }

  /api/v1/premarket/analysis:
    post:
      operationId: premarketAnalysis
      summary: Pre-market analysis (indices + watchlist + suggested alerts)
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                watchlist:
                  type: array
                  items: { type: string }
                lookback: { type: integer, default: 90 }
      responses:
        "200":
          description: Envelope with premarket outputs
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StdEnvelope' }

  /healthz:
    get:
      operationId: healthz
      summary: Liveness probe
      responses:
        "200":
          description: Health
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  mounted: { type: array, items: { type: string } }
                  failed: { type: object }

  /router-status:
    get:
      operationId: routerStatus
      summary: Router mount status
      responses:
        "200":
          description: Routers
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  mounted: { type: array, items: { type: string } }
                  failed: { type: object }

  /api/v1/diag/echo:
    get:
      operationId: diagEchoGet
      summary: Echo method/path/query/body (debug)
      parameters:
        - in: query
          name: from
          schema: { type: string }
        - in: query
          name: target
          schema: { type: string }
      responses:
        "200":
          description: Echo payload
          content:
            application/json:
              schema:
                type: object
                required: [method, url_path, query, headers_subset]
                properties:
                  method: { type: string }
                  url_path: { type: string }
                  query:
                    type: object
                    additionalProperties: { type: string }
                  headers_subset:
                    type: object
                    additionalProperties: { type: string }
                  body: {}
